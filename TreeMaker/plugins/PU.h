#ifndef PU_H
#define PU_H
 std::vector<float> PU_data, PU_MC;

 /* pileup is extracted with command (72 mb):
 * pileupCalc.py -i /afs/cern.ch/cms/CAF/CMSCOMM/COMM_DQM/certification/Collisions15/13TeV/Reprocessing/Cert_13TeV_16Dec2015ReReco_Collisions15_25ns_JSON.txt --inputLumiJSON /afs/cern.ch/cms/CAF/CMSCOMM/COMM_DQM/certification/Collisions15/13TeV/PileUp/pileup_latest.txt  --calcMode true --minBiasXsec 72000 --maxPileupBin 50 --numPileupBins 50  MyDataPileupHistogram.root
 */
float PU_data_f[50] = {
			4.87096787115e-05 ,
			0.000247523008608 ,
			0.000357921285449 ,
			0.000497956230733 ,
			0.000823745720772 ,
			0.00176902311975 ,
			0.00493415560084 ,
			0.0177006786002 ,
			0.054990257409 ,
			0.106153236061 ,
			0.148872357866 ,
			0.172559856551 ,
			0.169316601741 ,
			0.137949674616 ,
			0.0919390249395 ,
			0.0503003661288 ,
			0.0231791842748 ,
			0.00970355215607 ,
			0.00431802377035 ,
			0.00226019313549 ,
			0.00121730652521 ,
			0.000565565948546 ,
			0.000210515051605 ,
			6.28669886034e-05 ,
			1.6013842761e-05 ,
			3.97314990871e-06 ,
			1.11858828422e-06 ,
			3.72174723353e-07 ,
			1.37817073969e-07 ,
			5.36568473057e-08 ,
			2.11959312338e-08 ,
			8.28186994622e-09 ,
			3.14440175822e-09 ,
			1.14755307676e-09 ,
			4.00197369955e-10 ,
			1.32972936969e-10 ,
			4.20376904536e-11 ,
			1.2636673281e-11 ,
			3.61102873196e-12 ,
			9.80815927305e-13 ,
			2.53212627666e-13 ,
			6.2132577148e-14 ,
			1.44907108726e-14 ,
			3.21216806605e-15 ,
			6.76779378717e-16 ,
			1.35532040397e-16 ,
			2.57998807107e-17 ,
			4.66672024659e-18 ,
			8.03329413261e-19,
			1.29155723876e-19
};

/* MC distribution is taken from: 
* SimGeneral/MixingModule/python/mix_2015_25ns_FallMC_matchData_PoissonOOTPU_cfi.py
*/
float PU_MC_f[50]  {
 				0.000108643,
                0.000388957,
                0.000332882,
                0.00038397,
                0.000549167,
                0.00105412,
                0.00459007,
                0.0210314,
                0.0573688,
                0.103986,
                0.142369,
                0.157729,
                0.147685,
                0.121027,
                0.08855,
                0.0582866,
                0.0348526,
                0.019457,
                0.0107907,
                0.00654313,
                0.00463195,
                0.00370927,
                0.0031137,
                0.00261141,
                0.00215499,
                0.00174491,
                0.00138268,
                0.00106731,
                0.000798828,
                0.00057785,
                0.00040336,
                0.00027161,
                0.000176535,
                0.00011092,
                6.75502e-05,
                4.00323e-05,
                2.32123e-05,
                1.32585e-05,
                7.51611e-06,
                4.25902e-06,
                2.42513e-06,
                1.39077e-06,
                8.02452e-07,
                4.64159e-07,
                2.67845e-07,
                1.5344e-07,
                8.68966e-08,
                4.84931e-08,
                2.6606e-08,
                1.433e-08
};

std::vector<float> MC_dist(){ 
	for (unsigned int iPU = 0; iPU < 52; iPU++){
		PU_MC.push_back(PU_MC_f[iPU]);
	}
	return PU_MC;};
std::vector<float> data_dist(){ 
		for (unsigned int iPU = 0; iPU < 52; iPU++){
		PU_data.push_back(PU_data_f[iPU]);
	}
	return PU_data;};

#endif